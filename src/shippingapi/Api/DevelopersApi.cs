/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using shippingapi.Client;
using shippingapi.Model;

namespace shippingapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevelopersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Merchant Accounts
        /// </summary>
        /// <remarks>
        /// This operation prints a label for the shipment of containerized parcels destined for a Pitney Bowes warehouse facility from the client location.
        /// </remarks>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>MerchantAccountsResponse</returns>
        MerchantAccountsResponse GetMerchantAccounts (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// Get Merchant Accounts
        /// </summary>
        /// <remarks>
        /// This operation prints a label for the shipment of containerized parcels destined for a Pitney Bowes warehouse facility from the client location.
        /// </remarks>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of MerchantAccountsResponse</returns>
        ApiResponse<MerchantAccountsResponse> GetMerchantAccountsWithHttpInfo (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Merchant Accounts
        /// </summary>
        /// <remarks>
        /// This operation prints a label for the shipment of containerized parcels destined for a Pitney Bowes warehouse facility from the client location.
        /// </remarks>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of MerchantAccountsResponse</returns>
        System.Threading.Tasks.Task<MerchantAccountsResponse> GetMerchantAccountsAsync (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// Get Merchant Accounts
        /// </summary>
        /// <remarks>
        /// This operation prints a label for the shipment of containerized parcels destined for a Pitney Bowes warehouse facility from the client location.
        /// </remarks>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (MerchantAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantAccountsResponse>> GetMerchantAccountsAsyncWithHttpInfo (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevelopersApi : IDevelopersApi
    {
        private shippingapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevelopersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevelopersApi(String basePath)
        {
            this.Configuration = new shippingapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = shippingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevelopersApi"/> class
        /// </summary>
        /// <returns></returns>
        public DevelopersApi()
        {
            this.Configuration = shippingapi.Client.Configuration.Default;

            ExceptionFactory = shippingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevelopersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevelopersApi(shippingapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = shippingapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = shippingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public shippingapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public shippingapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Merchant Accounts. This operation retrieves the merchant account registered with the developer
        /// </summary>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">developerId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>MerchantAccountsResponse</returns>
        public MerchantAccountsResponse GetMerchantAccounts (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<MerchantAccountsResponse> localVarResponse = GetMerchantAccountsWithHttpInfo(xPBTransactionId, developerId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Merchant Accounts. This operation retrieves the merchant account registered with the developer
        /// </summary>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of MerchantAccountsResponse</returns>
        public ApiResponse<MerchantAccountsResponse> GetMerchantAccountsWithHttpInfo (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'xPBTransactionId' is set
            if (xPBTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xPBTransactionId' when calling DevelopersApi->GetMerchantAccounts");
            // verify the required parameter 'manifest' is set
            if (developerId == null)
                throw new ApiException(400, "Missing required parameter 'developerId' when calling DevelopersApi->GetMerchantAccounts");

            var localVarPath = $"/v1/developers/{developerId}/merchants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = string.Empty; // this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (xPBTransactionId != null) localVarHeaderParams.Add("X-PB-TransactionId", this.Configuration.ApiClient.ParameterToString(xPBTransactionId)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerchantAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantAccountsResponse)),
                //$"{localVarPath}?{localVarPathParams}", localVarPostBody?.ToString() ?? string.Empty, localVarResponse.Content
                $"{localVarPath}?{localVarPathParams}", (string)localVarPostBody, localVarResponse.Content
                );
        }

        /// <summary>
        /// Get Merchant Accounts. This operation retrieves the merchant account registered with the developer
        /// </summary>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">developerId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of MerchantAccountsResponse</returns>
        public async System.Threading.Tasks.Task<MerchantAccountsResponse> GetMerchantAccountsAsync (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<MerchantAccountsResponse> localVarResponse = await GetMerchantAccountsAsyncWithHttpInfo(xPBTransactionId, developerId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Merchant Accounts. This operation retrieves the merchant account registered with the developer
        /// </summary>
        /// <exception cref="shippingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="developerId">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (MerchantAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantAccountsResponse>> GetMerchantAccountsAsyncWithHttpInfo (string xPBTransactionId, string developerId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'xPBTransactionId' is set
            if (xPBTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xPBTransactionId' when calling DevelopersApi->GetMerchantAccounts");
            // verify the required parameter 'manifest' is set
            if (developerId == null)
                throw new ApiException(400, "Missing required parameter 'developerId' when calling DevelopersApi->GetMerchantAccounts");

            var localVarPath = $"/v1/developers/{developerId}/merchants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (xPBTransactionId != null) localVarHeaderParams.Add("X-PB-TransactionId", this.Configuration.ApiClient.ParameterToString(xPBTransactionId)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerchantAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantAccountsResponse)));
        }

    }
}
