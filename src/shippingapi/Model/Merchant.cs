/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = shippingapi.Client.OpenAPIDateConverter;

namespace shippingapi.Model
{
    /// <summary>
    /// Merchant
    /// </summary>
    [DataContract]
    public partial class Merchant :  IEquatable<Merchant>, IValidatableObject
    {
        /// <summary>
        /// Defines ContentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MerchantStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Merchant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="company">company.</param>
        /// <param name="deactivateDate">deactivateDate.</param>
        /// <param name="developerId">developerId.</param>
        /// <param name="email">mail.</param>
        /// <param name="enterpriseAccount">enterpriseAccount.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="merchantCarrierAccounts">merchantCarrierAccounts.</param>
        /// <param name="merchantStatus">merchantStatus.</param>
        /// <param name="merchantStatusReason">merchantStatusReason.</param>
        /// <param name="merchantType">type.</param>
        /// <param name="paymentAccountNumber">type.</param>
        /// <param name="paymentKey">type.</param>
        /// <param name="paymentMethod">type.</param>
        /// <param name="postalReportingNumber">type.</param>
        /// <param name="registeredDate">type.</param>
        /// <param name="subscriptionAccount">type.</param>
        public Merchant(
            string address = default(string),
            string company = default(string), 
            string deactivateDate = default(string),
            string developerId = default(string),
            string email = default(string),
            string enterpriseAccount = default(string),
            string fullName = default(string),
            List<MerchantCarrierAccount> merchantCarrierAccounts = default(List<MerchantCarrierAccount>),
            MerchantStatusEnum? merchantStatus = default(MerchantStatusEnum?),
            string merchantStatusReason = default(string),
            string merchantType = default(string),
            string paymentAccountNumber = default(string),
            string paymentKey = default(string),
            string paymentMethod = default(string),
            string postalReportingNumber = default(string),
            string registeredDate = default(string),
            string subscriptionAccount = default(string)
            )
        {
            this.Address = address;
            this.Company = company;
            this.DeactivateDate = deactivateDate;
            this.DeveloperId = developerId;
            this.Email = email;
            this.EnterpriseAccount = enterpriseAccount;
            this.FullName = fullName;
            this.MerchantCarrierAccounts = merchantCarrierAccounts;
            this.MerchantStatus = merchantStatus;
            this.MerchantStatusReason = merchantStatusReason;
            this.MerchantType = merchantType;
            this.PaymentAccountNumber = paymentAccountNumber;
            this.PaymentKey = paymentKey;
            this.PaymentMethod = paymentMethod;
            this.PostalReportingNumber = postalReportingNumber;
            this.RegisteredDate = registeredDate;
            this.SubscriptionAccount = subscriptionAccount;
        }


        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name= "address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name= "company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets DeactivateDate
        /// </summary>
        [DataMember(Name= "deactivateDate", EmitDefaultValue=false)]
        public string DeactivateDate { get; set; }

        /// <summary>
        /// Gets or Sets DeveloperId
        /// </summary>
        [DataMember(Name= "developerId", EmitDefaultValue=false)]
        public string DeveloperId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name= "email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EnterpriseAccount
        /// </summary>
        [DataMember(Name= "enterpriseAccount", EmitDefaultValue=false)]
        public string EnterpriseAccount { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name= "fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCarrierAccounts
        /// </summary>
        [DataMember(Name= "merchantCarrierAccounts", EmitDefaultValue=false)]
        public List<MerchantCarrierAccount> MerchantCarrierAccounts { get; set; }

        /// <summary>
        /// Gets or Sets MerchantStatus
        /// </summary>
        [DataMember(Name= "merchantStatus", EmitDefaultValue=false)]
        public MerchantStatusEnum? MerchantStatus { get; set; }

        /// <summary>
        /// Gets or Sets MerchantStatusReason
        /// </summary>
        [DataMember(Name= "merchantStatusReason", EmitDefaultValue=false)]
        public string MerchantStatusReason { get; set; }

        /// <summary>
        /// Gets or Sets MerchantType
        /// </summary>
        [DataMember(Name= "merchantType", EmitDefaultValue=false)]
        public string MerchantType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAccountNumber
        /// </summary>
        [DataMember(Name= "paymentAccountNumber", EmitDefaultValue=false)]
        public string PaymentAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentKey
        /// </summary>
        [DataMember(Name= "paymentKey", EmitDefaultValue=false)]
        public string PaymentKey { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name= "paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PostalReportingNumber
        /// </summary>
        [DataMember(Name= "postalReportingNumber", EmitDefaultValue=false)]
        public string PostalReportingNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredDate
        /// </summary>
        [DataMember(Name= "registeredDate", EmitDefaultValue=false)]
        public string RegisteredDate { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionAccount
        /// </summary>
        [DataMember(Name= "subscriptionAccount", EmitDefaultValue=false)]
        public string SubscriptionAccount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchant {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  DeactivateDate: ").Append(DeactivateDate).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnterpriseAccount: ").Append(EnterpriseAccount).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  MerchantCarrierAccounts: ").Append(MerchantCarrierAccounts).Append("\n");
            sb.Append("  MerchantStatus: ").Append(MerchantStatus).Append("\n");
            sb.Append("  MerchantStatusReason: ").Append(MerchantStatusReason).Append("\n");
            sb.Append("  MerchantType: ").Append(MerchantType).Append("\n");
            sb.Append("  PaymentAccountNumber: ").Append(PaymentAccountNumber).Append("\n");
            sb.Append("  PaymentKey: ").Append(PaymentKey).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PostalReportingNumber: ").Append(PostalReportingNumber).Append("\n");
            sb.Append("  RegisteredDate: ").Append(RegisteredDate).Append("\n");
            sb.Append("  SubscriptionAccount: ").Append(SubscriptionAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Merchant);
        }

        /// <summary>
        /// Returns true if Merchant instances are equal
        /// </summary>
        /// <param name="input">Instance of Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Merchant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.DeactivateDate == input.DeactivateDate ||
                    this.DeactivateDate != null &&
                    this.DeactivateDate.Equals(input.DeactivateDate)
                ) && 
                (
                    this.DeveloperId == input.DeveloperId ||
                    (this.DeveloperId != null &&
                    this.DeveloperId.Equals(input.DeveloperId))
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    this.Email.Equals(input.Email)
                ) && 
                (
                    this.EnterpriseAccount == input.EnterpriseAccount ||
                    (this.EnterpriseAccount != null &&
                    this.EnterpriseAccount.Equals(input.EnterpriseAccount))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.MerchantCarrierAccounts == input.MerchantCarrierAccounts ||
                    (this.MerchantCarrierAccounts != null &&
                    input.MerchantCarrierAccounts != null &&
                    this.MerchantCarrierAccounts.SequenceEqual(input.MerchantCarrierAccounts))
                ) && 
                (
                    this.MerchantStatus == input.MerchantStatus ||
                    (this.MerchantStatus != null &&
                    this.MerchantStatus.Equals(input.MerchantStatus))
                ) && 
                (
                    this.MerchantStatusReason == input.MerchantStatusReason ||
                    (this.MerchantStatusReason != null &&
                    this.MerchantStatusReason.Equals(input.MerchantStatusReason))
                ) && 
                (
                    this.MerchantType == input.MerchantType ||
                    (this.MerchantType != null &&
                    this.MerchantType.Equals(input.MerchantType))
                ) && 
                (
                    this.PaymentAccountNumber == input.PaymentAccountNumber ||
                    (this.PaymentAccountNumber != null &&
                    this.PaymentAccountNumber.Equals(input.PaymentAccountNumber))
                ) && 
                (
                    this.PaymentKey == input.PaymentKey ||
                    (this.PaymentKey != null &&
                    this.PaymentKey.Equals(input.PaymentKey))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PostalReportingNumber == input.PostalReportingNumber ||
                    (this.PostalReportingNumber != null &&
                    this.PostalReportingNumber.Equals(input.PostalReportingNumber))
                ) && 
                (
                    this.RegisteredDate == input.RegisteredDate ||
                    (this.RegisteredDate != null &&
                    this.RegisteredDate.Equals(input.RegisteredDate))
                ) && 
                (
                    this.SubscriptionAccount == input.SubscriptionAccount ||
                    (this.SubscriptionAccount != null &&
                    this.SubscriptionAccount.Equals(input.SubscriptionAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.DeactivateDate != null)
                    hashCode = hashCode * 59 + this.DeactivateDate.GetHashCode();
                if (this.DeveloperId != null)
                    hashCode = hashCode * 59 + this.DeveloperId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EnterpriseAccount != null)
                    hashCode = hashCode * 59 + this.EnterpriseAccount.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.MerchantCarrierAccounts != null)
                    hashCode = hashCode * 59 + this.MerchantCarrierAccounts.GetHashCode();
                if (this.MerchantStatus != null)
                    hashCode = hashCode * 59 + this.MerchantStatus.GetHashCode();
                if (this.MerchantStatusReason != null)
                    hashCode = hashCode * 59 + this.MerchantStatusReason.GetHashCode();
                if (this.MerchantType != null)
                    hashCode = hashCode * 59 + this.MerchantType.GetHashCode();
                if (this.PaymentAccountNumber != null)
                    hashCode = hashCode * 59 + this.PaymentAccountNumber.GetHashCode();
                if (this.PaymentKey != null)
                    hashCode = hashCode * 59 + this.PaymentKey.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PostalReportingNumber != null)
                    hashCode = hashCode * 59 + this.PostalReportingNumber.GetHashCode();
                if (this.RegisteredDate != null)
                    hashCode = hashCode * 59 + this.RegisteredDate.GetHashCode();
                if (this.SubscriptionAccount != null)
                    hashCode = hashCode * 59 + this.SubscriptionAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
