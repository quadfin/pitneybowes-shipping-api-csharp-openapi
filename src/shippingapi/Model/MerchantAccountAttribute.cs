/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = shippingapi.Client.OpenAPIDateConverter;

namespace shippingapi.Model
{
    /// <summary>
    /// MerchantAccountAttribute
    /// </summary>
    [DataContract]
    public partial class MerchantAccountAttribute :  IEquatable<MerchantAccountAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAccountAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantAccountAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAccountAttribute" /> class.
        /// </summary>
        /// <param name="attributeName">attributeName (required).</param>
        /// <param name="attributeValue">can be empty/blank, but not null (required).</param>
        public MerchantAccountAttribute(string attributeName = default(string), string attributeValue = default(string))
        {
            // to ensure "attributeName" is required (not null)
            if (attributeName == null)
            {
                throw new InvalidDataException("attributeName is a required property for MerchantAccountAttribute and cannot be null");
            }
            else
            {
                this.AttributeName = attributeName;
            }

            // to ensure "attributeValue" is required (not null)
            if (attributeValue == null)
            {
                throw new InvalidDataException("attributeValue is a required property for MerchantAccountAttribute and cannot be null");
            }
            else
            {
                this.AttributeValue = attributeValue;
            }
            
        }

        /// <summary>
        /// Gets or Sets AttributeName
        /// </summary>
        [DataMember(Name= "attributeName", EmitDefaultValue=true)]
        public string AttributeName { get; set; }

        /// <summary>
        /// can be empty/blank, but not null
        /// </summary>
        /// <value>can be empty/blank, but not null</value>
        [DataMember(Name= "attributeValue", EmitDefaultValue=true)]
        public string AttributeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantAccountAttribute {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeValue: ").Append(AttributeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantAccountAttribute);
        }

        /// <summary>
        /// Returns true if MerchantAccountAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantAccountAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantAccountAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.AttributeValue == input.AttributeValue ||
                    (this.AttributeValue != null &&
                    this.AttributeValue.Equals(input.AttributeValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeName != null)
                    hashCode = hashCode * 59 + this.AttributeName.GetHashCode();
                if (this.AttributeValue != null)
                    hashCode = hashCode * 59 + this.AttributeValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
