/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = shippingapi.Client.OpenAPIDateConverter;

namespace shippingapi.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract]
    public partial class MerchantCarrierAccount :  IEquatable<MerchantCarrierAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantCarrierAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        /// <param name="accountNumber">address.</param>
        /// <param name="carrierName">company.</param>
        /// <param name="deactivationDate">deactivateDate.</param>
        /// <param name="isActive">developerId.</param>
        /// <param name="isAuthorized">mail.</param>
        /// <param name="merchantCarrierAccountAttributes">enterpriseAccount.</param>
        /// <param name="registrationDate">fullName.</param>
        /// <param name="shipperCarrierAccountId">merchantCarrierAccounts.</param>
        public MerchantCarrierAccount(
            string accountNumber = default(string),
            string carrierName = default(string), 
            long? deactivationDate = default(long),
            bool? isActive = default(bool),
            bool? isAuthorized = default(bool),
            List<MerchantAccountAttribute> merchantCarrierAccountAttributes = default(List<MerchantAccountAttribute>),
            long? registrationDate = default(long),
            string shipperCarrierAccountId = default(string)
            )
        {
            this.AccountNumber = accountNumber;
            this.CarrierName = carrierName;
            this.DeactivationDate = deactivationDate;
            this.IsActive = isActive;
            this.IsAuthorized = isAuthorized;
            this.MerchantCarrierAccountAttributes = merchantCarrierAccountAttributes;
            this.RegistrationDate = registrationDate;
            this.ShipperCarrierAccountId = shipperCarrierAccountId;
        }


        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name= "accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets CarrierName
        /// </summary>
        [DataMember(Name= "carrierName", EmitDefaultValue=false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets DeactivationDate
        /// </summary>
        [DataMember(Name= "deactivationDate", EmitDefaultValue=false)]
        public long? DeactivationDate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name= "isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsAuthorized
        /// </summary>
        [DataMember(Name= "isAuthorized", EmitDefaultValue=false)]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCarrierAccountAttributes
        /// </summary>
        [DataMember(Name= "merchantCarrierAccountAttributes", EmitDefaultValue=false)]
        public List<MerchantAccountAttribute> MerchantCarrierAccountAttributes { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name= "registrationDate", EmitDefaultValue=false)]
        public long? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipperCarrierAccountId
        /// </summary>
        [DataMember(Name= "shipperCarrierAccountId", EmitDefaultValue=false)]
        public string ShipperCarrierAccountId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchant {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  DeactivationDate: ").Append(DeactivationDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsAuthorized: ").Append(IsAuthorized).Append("\n");
            sb.Append("  MerchantCarrierAccountAttributes: ").Append(MerchantCarrierAccountAttributes).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  ShipperCarrierAccountId: ").Append(ShipperCarrierAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantCarrierAccount);
        }

        /// <summary>
        /// Returns true if Merchant instances are equal
        /// </summary>
        /// <param name="input">Instance of Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantCarrierAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.DeactivationDate == input.DeactivationDate ||
                    this.DeactivationDate != null &&
                    this.DeactivationDate.Equals(input.DeactivationDate)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsAuthorized == input.IsAuthorized ||
                    this.IsAuthorized != null &&
                    this.IsAuthorized.Equals(input.IsAuthorized)
                ) && 
                (
                    this.MerchantCarrierAccountAttributes == input.MerchantCarrierAccountAttributes ||
                    (this.MerchantCarrierAccountAttributes != null &&
                    input.MerchantCarrierAccountAttributes != null &&
                    this.MerchantCarrierAccountAttributes.SequenceEqual(input.MerchantCarrierAccountAttributes))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.ShipperCarrierAccountId == input.ShipperCarrierAccountId ||
                    (this.ShipperCarrierAccountId != null &&
                    this.ShipperCarrierAccountId.Equals(input.ShipperCarrierAccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.DeactivationDate != null)
                    hashCode = hashCode * 59 + this.DeactivationDate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsAuthorized != null)
                    hashCode = hashCode * 59 + this.IsAuthorized.GetHashCode();
                if (this.MerchantCarrierAccountAttributes != null)
                    hashCode = hashCode * 59 + this.MerchantCarrierAccountAttributes.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.ShipperCarrierAccountId != null)
                    hashCode = hashCode * 59 + this.ShipperCarrierAccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
