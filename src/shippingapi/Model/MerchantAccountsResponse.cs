/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = shippingapi.Client.OpenAPIDateConverter;

namespace shippingapi.Model
{
    /// <summary>
    /// MerchantAccountsResponse
    /// </summary>
    [DataContract]
    public partial class MerchantAccountsResponse :  IEquatable<MerchantAccountsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAccountsResponse" /> class.
        /// </summary>
        /// <param name="content">content.</param>
        /// <param name="totalPages">totalPages.</param>
        /// <param name="totalElements">totalElements.</param>
        /// <param name="last">last.</param>
        /// <param name="size">size.</param>
        /// <param name="number">number.</param>
        /// <param name="sort">sort.</param>
        /// <param name="numberOfElements">numberOfElements.</param>
        /// <param name="first">first.</param>
        public MerchantAccountsResponse(
            List<Merchant> content = default(List<Merchant>),
            int totalPages = default(int),
            int totalElements = default(int),
            bool last = default(bool),
            int size = default(int),
            int number = default(int),
            List<MerchantAccountsResponseSort> sort = default(List<MerchantAccountsResponseSort>),
            int numberOfElements = default(int),
            bool first = default(bool)
            )
        {
            this.Content = content;
            this.TotalPages = totalPages;
            this.TotalElements = totalElements;
            this.Last = last;
            this.Size = size;
            this.Number = totalPages;
            this.Sort = sort;
            this.NumberOfElements = numberOfElements;
            this.First = first;
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name= "content", EmitDefaultValue=false)]
        public List<Merchant> Content { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name= "totalPages")]
        public int TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets TotalElements
        /// </summary>
        [DataMember(Name= "totalElements")]
        public int TotalElements { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name= "last")]
        public bool Last { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name= "size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name= "number")]
        public int Number { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name= "sort", EmitDefaultValue=false)]
        public List<MerchantAccountsResponseSort> Sort { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfElements
        /// </summary>
        [DataMember(Name= "numberOfElements")]
        public int NumberOfElements { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name= "first")]
        public bool First { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantAccountsResponse {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  TotalElements: ").Append(TotalElements).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  NumberOfElements: ").Append(NumberOfElements).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantAccountsResponse);
        }

        /// <summary>
        /// Returns true if MerchantAccountsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantAccountsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantAccountsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.TotalPages == input.TotalPages
                ) && 
                (
                    this.TotalElements == input.TotalElements
                ) && 
                (
                    this.Last == input.Last
                ) && 
                (
                    this.Size == input.Size
                ) && 
                (
                    this.Number == input.Number
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort))
                ) && 
                (
                    this.NumberOfElements == input.NumberOfElements
                ) && 
                (
                    this.First == input.First
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                //if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                //if (this.TotalElements != null)
                    hashCode = hashCode * 59 + this.TotalElements.GetHashCode();
                //if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                //if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                //if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                //if (this.NumberOfElements != null)
                    hashCode = hashCode * 59 + this.NumberOfElements.GetHashCode();
                //if (this.First != null)
                    hashCode = hashCode * 59 + this.First.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
