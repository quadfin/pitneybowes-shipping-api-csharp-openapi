/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = shippingapi.Client.OpenAPIDateConverter;

namespace shippingapi.Model
{
    /// <summary>
    /// MerchantAccountsResponseSort
    /// </summary>
    [DataContract]
    public partial class MerchantAccountsResponseSort :  IEquatable<MerchantAccountsResponseSort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantAccountsResponseSort" /> class.
        /// </summary>
        /// <param name="direction">direction.</param>
        /// <param name="property">property.</param>
        /// <param name="ignoreCase">ignoreCase.</param>
        /// <param name="nullHandling">nullHandling.</param>
        /// <param name="ascending">ascending.</param>
        /// <param name="descending">descending.</param>
        public MerchantAccountsResponseSort(
            string direction = default(string),
            string property = default(string),
            bool ignoreCase = default(bool),
            string nullHandling = default(string),
            bool ascending = default(bool),
            bool descending = default(bool)
            )
        {
            this.Direction = direction;
            this.Property = property;
            this.IgnoreCase = ignoreCase;
            this.NullHandling = nullHandling;
            this.Ascending = ascending;
            this.Descending = descending;
        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name= "direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name= "property", EmitDefaultValue=false)]
        public string Property { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreCase
        /// </summary>
        [DataMember(Name= "ignoreCase")]
        public bool IgnoreCase { get; set; }

        /// <summary>
        /// Gets or Sets NullHandling
        /// </summary>
        [DataMember(Name= "nullHandling", EmitDefaultValue=false)]
        public string NullHandling { get; set; }

        /// <summary>
        /// Gets or Sets Ascending
        /// </summary>
        [DataMember(Name= "ascending")]
        public bool Ascending { get; set; }

        /// <summary>
        /// Gets or Sets Descending
        /// </summary>
        [DataMember(Name= "descending")]
        public bool Descending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantAccountsResponseSort {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  IgnoreCase: ").Append(IgnoreCase).Append("\n");
            sb.Append("  NullHandling: ").Append(NullHandling).Append("\n");
            sb.Append("  Ascending: ").Append(Ascending).Append("\n");
            sb.Append("  Descending: ").Append(Descending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantAccountsResponseSort);
        }

        /// <summary>
        /// Returns true if MerchantAccountsResponseSort instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantAccountsResponseSort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantAccountsResponseSort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.IgnoreCase == input.IgnoreCase
                ) && 
                (
                    this.NullHandling == input.Direction ||
                    (this.NullHandling != null &&
                    this.NullHandling.Equals(input.NullHandling))
                ) && 
                (
                    this.Ascending == input.Ascending
                ) && 
                (
                    this.Descending == input.Descending
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                //if (this.IgnoreCase != null)
                hashCode = hashCode * 59 + this.IgnoreCase.GetHashCode();
                if (this.NullHandling != null)
                    hashCode = hashCode * 59 + this.NullHandling.GetHashCode();
                //if (this.Ascending != null)
                hashCode = hashCode * 59 + this.Ascending.GetHashCode();
                //if (this.Descending != null)
                hashCode = hashCode * 59 + this.Descending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
